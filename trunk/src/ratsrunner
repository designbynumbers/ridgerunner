#!/usr/bin/perl

#
# ratsrunner runs the Ridgerunner Automated Test Suite (RATS), which is a collection of 
# simple test problems intended to benchmark the ridgerunner system and make sure that 
# changes to the algorithm don't cause unintended side effects.
#

#
# the script is intended to be run only from the /src directory (it is not installed by
# default, though it is run as part of make check). The script updates the files ratsDB.pl
# and (if you have gnuplot) ratsgraph.pdf when you run it.
#

#
# the script stomps the local subdirectory ./ratsworking (we need to preserve the .rr 
# directories generated by the runs in case they don't complete as expected).
#

# ratsrunner will also take  "--rrargs=" stuff " " which gives any and
# all additional ridgerunner arguments which are common to all the runs.

#
# the program reports a relative performance score in "rats", based on
# the performance of the initial runs on a test machine at UGA, which
# was decreed to have 100 rats worth of performance
#

use strict;
use File::Temp;
use File::Copy;
use File::Slurp;
use File::Path;
use File::Spec;
use Data::Dumper;
use Time::Local;
use Sys::Hostname;
use Cwd;
use warnings;
use Getopt::Long;
use Benchmark;

my $svnversion;
my $ratsversion;
my $hostname;
my $rawtime;
my $nrats;
my $timestamp;
my $wd;

#
# We start by collecting data about the machine and the version of rats and ridgerunner.
#

$svnversion = `svnversion -n`;
$hostname = hostname( );
$ratsversion = '$Revision$';
$wd = getcwd;

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
$timestamp = sprintf "%4d-%02d-%02d %02d:%02d:%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec;

#
# Now we print some of this data for the user.
#

print "$timestamp\n";
print "RATSrunner $ratsversion performing tests on ridgerunner $svnversion on $hostname.\n";
print "This sequence of automated tests should take about 5 minutes to run. Testing will\n";
print "be aborted after 60 minutes.\n\n";

print "The files for the runs will appear in $wd/ratsworking.\n\n";

#
# Now we parse the input arguments.
# 

my $filename;
my $ropelen_before;
my $ropelen_after;
my $residual_before;
my $residual_after;

format PROGRESS_COMPLETE_TOP =

     RATS tests

     Filename               Ropelength                              Residual
                            Before              After               Before    After
     ---------------------  ------------------  ------------------  --------  --------
.

format PROGRESS_COMPLETE = 
     @<<<<<<<<<<<<<<<<<<<<  @####.############  @####.############  @#.#####  @#.#####
     $filename,             $ropelen_before,    $ropelen_after,     $residual_before, $residual_after 
.

format PROGRESS_INCOMPLETE_TOP = 

     Incomplete Files 

     Filename
     ---------------------
.

format PROGRESS_INCOMPLETE = 
     @<<<<<<<<<<<<<<<<<<<<
     $filename
.

my $rrargs = '';

GetOptions ( 'rrargs=s' => \$rrargs );

#
# We now create the ./ratsworking directory if needed.
#

  unless (-d "./ratsworking") { 

      mkpath("./ratsworking") or die("Couldn't create ./ratsworking");

  }

#
# And we're now ready to start the actual RATS runs.
#  

chdir("./ratsworking") or die("Couldn't chdir to ./ratsworking");

my @runs;
my @terminatedbecause;
my $before;
my $after;
my %results;

my @files = qw( ../data/sticktrefoil.vect ../../data/9.2.3.vect ../../data/3.1.vect ../../data/simple_clasp.vect ../../data/kl_10_18_dt.vect );

$before = Benchmark->new;

%results = &ridgerunner("../../data/sticktrefoil.vect","--NoPNGOutput --StopTime=5 --StopRes=0.01 $rrargs");
print "sticktrefoil test completed in $results{steps} steps with final residual of $results{residual}.\n";

%results = &ridgerunner("../../data/9.2.3.vect","--NoPNGOutput --StopTime=10 --StopRes=0.1 $rrargs");
print "9.2.3 test completed in $results{steps} steps with final residual of $results{residual}.\n";

%results = &ridgerunner("../../data/3.1.vect","--NoPNGOutput --StopTime=10 --StopRes=0.1 $rrargs");
print "3.1 test completed in $results{steps} steps with final residual of $results{residual}.\n";

%results = &ridgerunner("../../data/simple_clasp.vect","--NoPNGOutput --StopTime=10 --StopRes=0.1 $rrargs");
print "simple clasp test completed in $results{steps} steps with final residual of $results{residual}.\n";

%results = &ridgerunner("../../data/kl_10_18_dt.vect","--NoPNGOutput --StopTime=10 --StopRes=0.1 $rrargs");
print "10_18 dt test completed in $results{steps} steps with final residual of $results{residul}.\n";

$after = Benchmark->new;

print "@runs";

my $td;
my $ts;
$td = timediff($after, $before);
$ts = timestr($td);

print "The RATS benchmarks took: $ts \n";
my $seconds;
$ts =~ /(\d+) wallclock/;
$seconds = $1;

chdir("..") or die("Couldn't chdir to parent directory.");

my $DBFILE = read_file('ratsDB.pl');
my %ratsdata;
eval($DBFILE);

$ratsdata{$timestamp}{seconds} = $seconds;
$ratsdata{$timestamp}{rrversion} = $svnversion;
$ratsdata{$timestamp}{ratsversion} = $ratsversion;
$ratsdata{$timestamp}{host} = $hostname;

open(KNOTDB,'>ratsDB.pl') or die "Unable to create ratsDB file.";
print KNOTDB Data::Dumper->Dump([\%ratsdata],['*ratsdata']),"\n";
close KNOTDB;

die();

open(PROGRESS_COMPLETE,">./rats_report.txt");

foreach (@files) {

  $filename = $_;
  $ropelen_before = &ropelength("./inputs/$filename");
  $ropelen_after = &ropelength("./outputs/$filename");
  $residual_before = &residual("./inputs/$filename");
  $residual_after = &residual("./outputs/$filename");
  
  write(PROGRESS_COMPLETE);
  
}

close(PROGRESS_COMPLETE);

open(BRP,"<./batchrunner_progress.txt");
while (<BRP>) { print $_; }
close(BRP);

die();

# The point of the ridgerunner command is to allow the user to call ridgerunner in a way that automatically harvests the
# data that you are most likely to want to know from the run (either by reading stdout or by looking at logfiles).

sub ridgerunner {  
     my $filename = $_[0];
     my $cmds = $_[1];
     my $steps;
     my $rop;
     my $str;
     my $mrstruts;
     my $residual;
     my $tailflag;
     my @endbecause;

     $tailflag = "false";

     open(RR,"ridgerunner $filename --Display=\"residual\" $cmds |") || die("Can't spawn a ridgerunner $filename --Display=\"residual\" $cmds");

     while(<RR>) {

       if (/Rop: (\S+)/) { 
       
	 $rop = $1;

       }

       if (/(\d+) Rop/) {

	 $steps = $1;

       }

       if (/Residual: (\S+)/) {

	 $residual = $1;

       }

       if (/Str: (\S+)/) {

	 $str = $1;

       }

       if (/MRstruts: (\S+)/) {

	 $mrstruts = $1;

       }
     
       if (/run complete/) {

	 $tailflag = "true";

       }

       if ($tailflag eq "true") {

	 push(@endbecause,$_);

       }

     }

     my %rrhash;

     $rrhash{ropelength} = $rop;
     $rrhash{steps} = $steps;
     $rrhash{terminated} = "@endbecause";
     $rrhash{struts} = $str;
     $rrhash{mrstruts} = $mrstruts;
     $rrhash{residual} = $residual;

     %rrhash;

   }
     

sub ropelength { 
     my $filename;
     $filename = $_[0];
     my $ropelength;

     open (ROPELENGTH,"ropelength $filename |");
     while (<ROPELENGTH>) {
       if (/:Ropelength:\s*(\S+)/) {
	 $ropelength = $1;
       }
     }
     close ROPELENGTH;

     $ropelength;
   }

sub residual {
     my $filename;
     $filename = $_[0];
     my $residual;

     open (RESIDUAL,"residual.pl $filename |");
     while (<RESIDUAL>) {
       if (/Residual:\s*(\S+)/) {
	 $residual = $1;
       }
     }
     close RESIDUAL;

     $residual;
   }

    


