#!/usr/bin/perl
#
#
# Animate a directory of vectfiles using povsnap. Should be run in the directory.
#

use warnings;
use File::Copy;
use File::Path;
use Term::ProgressBar;
use Getopt::Long;

my $spinFrames = '';
my $spinOnly = '';
my $numSec = 20;

GetOptions ( 'spinFrames=i' => \$spinFrames, 'numSec=i' => \$numSec);

my $nsec;
$nsec = 20;
if (defined $numSec) { $nsec = $numSec; }

my $nframes;
$nframes = $nsec*24; # 20 seconds at 24 fps

my @rawvectfiles;
@rawvectfiles = <*.vect>;
my $file;

# If we're in a snapshot directory, don't try to render the various cruft

foreach $file ( @rawvectfiles ) {

  if ($file !~ /dVdt\.vect/ and $file !~ /dlen\.vect/ and $file !~ /struts\.vect/) {

    push(@vectfiles,$file);

  }

}


my $skip;
$skip = int(scalar @vectfiles / $nframes);
if ($skip < 1) { $skip = 1; }

print "Animating directory of ".scalar @vectfiles." files\n";
print "Will create ".(scalar @vectfiles / $skip)." frames to reach desired $nsec second time.\n";

my $tubename;

my $kpname;
my $vectname;
my $pngname;

my $skipcount;
my $framecount;

$skipcount = 0;
$framecount = 1;

if (-d "../movie/") { rmtree("../movie/"); }
mkdir("../movie/");

print "Tubing files...\n";

my $progress;
$progress = Term::ProgressBar->new( {count => $nframes, ETA => "linear", name => 'Files'} );
$progress->minor(0);

my $next_update = 0;
my @offs;

foreach $file ( @vectfiles ) {

  if ($skipcount == $skip) { 

    $next_update = $progress->update($framecount) if $framecount >= $next_update;

    `tube -r 0.5 $file 2>1 1>/dev/null`;
    
    $tubename = $file;
    $tubename =~ s/vect/tube\.off/g;

    push(@offs,$tubename);
 
    $skipcount = 1;
    $framecount++;

  } else {

    $skipcount++;

  }

}

$progress->update($nframes) if $nframes >= $next_update;
 
print "\nOrienting the entire collection of surfaces (could take some time)\n";

`orient -a 2 @offs`;

print "Rendering the frames\n";

$progress = Term::ProgressBar->new( {count => scalar @offs, ETA => "linear",} );
$next_update = 0;

my $offcount;
$offcount = 0;
my $snapdirname;

foreach $tubename (@offs) {

  if ($opt_s) { `povsnap --NoDisplay -s $tubename 2>1 1>/dev/null`; }
  elsif ($opt_v) {  `povsnap --NoDisplay -v $tubename 2>1 1>/dev/null`; }
  elsif ($opt_p) {  `povsnap --NoDisplay -p $tubename 2>1 1>/dev/null`; }
  else {  `povsnap --NoDisplay -v $tubename 2>1 1>/dev/null`; }
  
  $pngname = $tubename;
  $pngname =~ s/off/png/g;
  
  move($pngname,"../movie/$pngname");
  unlink($tubename);

  $snapdirname = $tubename;
  $snapdirname =~ s/off//g;

  rmtree($snapdirname);

  $next_update = $progress->update($offcount) if $offcount >= $next_update;
  $offcount++;
  
}

$progress->update(scalar @offs) if (scalar @offs) >= $next_update;
 
if (defined $spinFrames) {

    print "Now generating spin frames...\n";
    `orient -a 2 -s $spinFrames $offs[-1]`;

    my @spinOffs;

    @spinOffs = <spin*off>;

    $progress = Term::ProgressBar->new( {count => scalar @spinOffs, ETA => "linear",} );
    $next_update = 0;

    $offcount = 0;
    
    foreach $tubename (@spinOffs) {

	if ($opt_s) { `povsnap -s $tubename 2>1 1>/dev/null`; }
	elsif ($opt_v) {  `povsnap -v $tubename 2>1 1>/dev/null`; }
	elsif ($opt_p) {  `povsnap -p $tubename 2>1 1>/dev/null`; }
	else {  `povsnap -v $tubename 2>1 1>/dev/null`; }
	
	$pngname = $tubename;
	$pngname =~ s/off/png/g;
	$pngname =~ s/spin/zzzz/g;
	
	move($pngname,"../movie/$pngname");
	unlink($tubename);
	
	$next_update = $progress->update($offcount) if $offcount >= $next_update;
	$offcount++;

    }

}
