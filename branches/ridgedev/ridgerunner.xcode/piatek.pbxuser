// !$*UTF8*$!
{
	08FB7793FE84155DC02AAC07 = {
		activeBuildStyle = 014CEA460018CE2711CA2923;
		activeExecutable = D3D97778067BEA23004CF65C;
		activeTarget = 34DAD8D70667F7DF0019DC0C;
		addToTargets = (
			34DAD8D70667F7DF0019DC0C,
		);
		breakpoints = (
			D32AE3EF0698932F00FDDDA1,
			D360236A06CC98BC002C5AE1,
			D360236C06CC98FA002C5AE1,
			D360238106CC9943002C5AE1,
			D360238306CC9948002C5AE1,
			D360239E06CC9D1A002C5AE1,
		);
		codeSenseManager = D3D97788067BEA30004CF65C;
		executables = (
			D3D97777067BEA23004CF65C,
			D3D97778067BEA23004CF65C,
			D3D97779067BEA23004CF65C,
		);
		perUserDictionary = {
			PBXConfiguration.PBXFileTableDataSource3.PBXExecutablesDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXExecutablesDataSource_NameID;
				PBXFileTableDataSourceColumnWidthsKey = (
					22,
					849.7974,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXExecutablesDataSource_ActiveFlagID,
					PBXExecutablesDataSource_NameID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXFileTableDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXFileDataSource_Filename_ColumnID;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					598,
					20,
					108,
					43,
					43,
					20,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFileDataSource_FiletypeID,
					PBXFileDataSource_Filename_ColumnID,
					PBXFileDataSource_Built_ColumnID,
					PBXFileDataSource_ObjectSize_ColumnID,
					PBXFileDataSource_Errors_ColumnID,
					PBXFileDataSource_Warnings_ColumnID,
					PBXFileDataSource_Target_ColumnID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.XCSCMDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXFileDataSource_Filename_ColumnID;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					20,
					440,
					20,
					71,
					43,
					43,
					20,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFileDataSource_SCM_ColumnID,
					PBXFileDataSource_FiletypeID,
					PBXFileDataSource_Filename_ColumnID,
					PBXFileDataSource_Built_ColumnID,
					PBXFileDataSource_ObjectSize_ColumnID,
					PBXFileDataSource_Errors_ColumnID,
					PBXFileDataSource_Warnings_ColumnID,
					PBXFileDataSource_Target_ColumnID,
				);
			};
			PBXPerProjectTemplateStateSaveDate = 114071275;
			PBXPrepackagedSmartGroups_v2 = (
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					activationKey = OldTargetSmartGroup;
					clz = PBXTargetSmartGroup;
					description = "Displays all targets of the project.";
					globalID = 1C37FABC04509CD000000102;
					name = Targets;
					preferences = {
						image = Targets;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXTargetSmartGroup2;
					description = "Displays all targets of the project as well as nested build phases.";
					globalID = 1C37FBAC04509CD000000102;
					name = Targets;
					preferences = {
						image = Targets;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXExecutablesSmartGroup;
					description = "Displays all executables of the project.";
					globalID = 1C37FAAC04509CD000000102;
					name = Executables;
					preferences = {
						image = Executable;
					};
				},
				{
					" PBXTransientLocationAtTop " = bottom;
					absolutePathToBundle = "";
					clz = PBXErrorsWarningsSmartGroup;
					description = "Displays files with errors or warnings.";
					globalID = 1C08E77C0454961000C914BD;
					name = "Errors and Warnings";
					preferences = {
						fnmatch = "";
						image = WarningsErrors;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = 1CC0EA4004350EF90044410B;
					name = "Implementation Files";
					preferences = {
						canSave = 1;
						fnmatch = "";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "?*\\.[mcMC]";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "This group displays Interface Builder NIB Files.";
					globalID = 1CC0EA4004350EF90041110B;
					name = "NIB Files";
					preferences = {
						canSave = 1;
						fnmatch = "*.nib";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = no;
					absolutePathToBundle = "";
					clz = PBXFindSmartGroup;
					description = "Displays Find Results.";
					globalID = 1C37FABC05509CD000000102;
					name = "Find Results";
					preferences = {
						image = spyglass;
					};
				},
				{
					PBXTransientLocationAtTop = no;
					absolutePathToBundle = "";
					clz = PBXBookmarksSmartGroup;
					description = "Displays Project Bookmarks.";
					globalID = 1C37FABC05539CD112110102;
					name = Bookmarks;
					preferences = {
						image = Bookmarks;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = XCSCMSmartGroup;
					description = "Displays files with interesting SCM status.";
					globalID = E2644B35053B69B200211256;
					name = SCM;
					preferences = {
						image = PBXRepository;
						isLeaf = 0;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXSymbolsSmartGroup;
					description = "Displays all symbols for the project.";
					globalID = 1C37FABC04509CD000100104;
					name = "Project Symbols";
					preferences = {
						image = ProjectSymbols;
						isLeaf = 1;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = PBXTemplateMarker;
					name = "Simple Filter SmartGroup";
					preferences = {
						canSave = 1;
						fnmatch = "*.nib";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = PBXTemplateMarker;
					name = "Simple Regular Expression SmartGroup";
					preferences = {
						canSave = 1;
						fnmatch = "";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "?*\\.[mcMC]";
						root = "<PROJECT>";
					};
				},
			);
			PBXWorkspaceContents = (
				{
					PBXProjectWorkspaceModule_StateKey_Rev39 = {
						PBXProjectWorkspaceModule_DEGV_Geometry = {
							_collapsingFrameDimension = 0;
							_indexOfCollapsedView = 0;
							_percentageOfCollapsedView = 0;
							isCollapsed = yes;
							sizes = (
								"{{0, 0}, {895, 0}}",
								"{{0, 0}, {895, 709}}",
							);
						};
						PBXProjectWorkspaceModule_DataSourceSelectionKey_Rev6 = {
							BoundsStr = "{{0, 0}, {880, 15}}";
							Rows = (
								0,
							);
							VisibleRectStr = "{{0, 0}, {0, 0}}";
						};
						PBXProjectWorkspaceModule_EditorOpen = true;
						PBXProjectWorkspaceModule_EmbeddedNavigatorGroup = {
							PBXSplitModuleInNavigatorKey = {
								Split0 = {
									bookmark = D360239F06CC9EC6002C5AE1;
									history = (
										D3B4C2E706936531002E6624,
										D38FCD0F0694AB1C00ADF170,
										D3C85E6E0695F8D5003BCB83,
										D3C85EA906960621003BCB83,
										D3C85F1906961C69003BCB83,
										D32AE401069893DF00FDDDA1,
										D3D2126606A85B8600B86634,
										D3D2127106A85BBF00B86634,
										D3C6197F06B3045000BEF796,
										D3C619CC06B30C9A00BEF796,
										D3116C8406B3580000070847,
										D3AD599706B7029C00CD0BF4,
										D3AD59E106B709A100CD0BF4,
										D3AD59E606B70AF300CD0BF4,
										D3AD5ADB06B773A400CD0BF4,
										D3FECB2906BD95AD00C991DF,
										D3D9844206BF52A700243C21,
										D3D984C406C0260900243C21,
										D3D984E106C02FC700243C21,
										D30FCE0E06C0644500EE3947,
										D348FDF506C20EF600BEDA03,
										D310080406C9A5880050EC1B,
										D310082C06C9A7050050EC1B,
										D310084C06C9A8000050EC1B,
										D310085406C9A8AB0050EC1B,
										D360237306CC9924002C5AE1,
										D360237D06CC993B002C5AE1,
										D360239406CC9A24002C5AE1,
										D360239906CC9D11002C5AE1,
									);
									prevStack = (
										D366899D067CDAF90009380A,
										D381D985068118CB00461949,
										D33FEB7D068CA70100787B33,
										D323B91F068E63E500A4C9F5,
										D34D2B83068FB8C500BECC99,
										D3B4C2E806936531002E6624,
										D3B4C34606938141002E6624,
										D38FCD160694AB2000ADF170,
										D3C85EF506961BEE003BCB83,
										D3C85F1306961C5C003BCB83,
										D3C8600B06962668003BCB83,
										D32AE402069893DF00FDDDA1,
										D37CA5BA06A1F811008B8319,
										D3D210E406A70DEB00B86634,
										D3D2127306A85BBF00B86634,
										D3C614D006B0629E00BEF796,
										D3AD59E706B70AF300CD0BF4,
										D3FECB3006BD95AF00C991DF,
										D3D984EA06C0342100243C21,
										D30FCE0F06C0644500EE3947,
										D348FDF606C20EF600BEDA03,
										D310080506C9A5880050EC1B,
										D360234906CC981C002C5AE1,
										D360234E06CC9826002C5AE1,
										D360235206CC983B002C5AE1,
										D360236306CC989C002C5AE1,
										D360236706CC989F002C5AE1,
										D360237006CC9913002C5AE1,
										D360237406CC9924002C5AE1,
										D360237A06CC9939002C5AE1,
										D360237E06CC993B002C5AE1,
										D360238706CC997C002C5AE1,
										D360238B06CC997F002C5AE1,
										D360239106CC9A23002C5AE1,
										D360239506CC9A24002C5AE1,
									);
								};
								SplitCount = 1;
							};
						};
						PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
							PBXProjectWorkspaceModule_SGTM_Geometry = {
								_collapsingFrameDimension = 0;
								_indexOfCollapsedView = 0;
								_percentageOfCollapsedView = 0;
								sizes = (
									"{{0, 0}, {185, 709}}",
									"{{185, 0}, {895, 709}}",
								);
							};
						};
						PBXProjectWorkspaceModule_OldDetailFrame = "{{0, 0}, {895, 0}}";
						PBXProjectWorkspaceModule_OldEditorFrame = "{{0, 0}, {895, 709}}";
						PBXProjectWorkspaceModule_OldSuperviewFrame = "{{185, 0}, {895, 709}}";
						PBXProjectWorkspaceModule_SGTM = {
							PBXBottomSmartGroupGIDs = (
								1C37FBAC04509CD000000102,
								1C37FAAC04509CD000000102,
								1C08E77C0454961000C914BD,
								1C37FABC05509CD000000102,
								1C37FABC05539CD112110102,
								E2644B35053B69B200211256,
								1C37FABC04509CD000100104,
								1CC0EA4004350EF90044410B,
								1CC0EA4004350EF90041110B,
							);
							PBXSmartGroupTreeModuleColumnData = {
								PBXSmartGroupTreeModuleColumnWidthsKey = (
									168,
								);
								PBXSmartGroupTreeModuleColumnsKey_v4 = (
									MainColumn,
								);
							};
							PBXSmartGroupTreeModuleOutlineStateKey_v7 = {
								PBXSmartGroupTreeModuleOutlineStateExpansionKey = (
									08FB7794FE84155DC02AAC07,
									08FB7795FE84155DC02AAC07,
									34DAD9240667F94F0019DC0C,
									34DAD7A10667F2C70019DC0C,
									1AB674ADFE9D54B511CA2CBB,
									1C37FAAC04509CD000000102,
								);
								PBXSmartGroupTreeModuleOutlineStateSelectionKey = (
									(
										14,
										10,
										1,
										0,
									),
								);
								PBXSmartGroupTreeModuleOutlineStateVisibleRectKey = "{{0, 0}, {168, 691}}";
							};
							PBXTopSmartGroupGIDs = (
							);
						};
					};
				},
			);
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXBuildResultsModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXDebugBreakpointsModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXDebugCLIModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXDebugSessionModule" = {
				Debugger = {
					HorizontalSplitView = {
						_collapsingFrameDimension = 0;
						_indexOfCollapsedView = 0;
						_percentageOfCollapsedView = 0;
						isCollapsed = yes;
						sizes = (
							"{{0, 0}, {299, 212}}",
							"{{299, 0}, {503, 212}}",
						);
					};
					VerticalSplitView = {
						_collapsingFrameDimension = 0;
						_indexOfCollapsedView = 0;
						_percentageOfCollapsedView = 0;
						isCollapsed = yes;
						sizes = (
							"{{0, 0}, {802, 212}}",
							"{{0, 212}, {802, 288}}",
						);
					};
				};
				LauncherConfigVersion = 8;
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXDebugSingleDataValueViewModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXNavigatorGroup" = {
				PBXSplitModuleInNavigatorKey = {
					SplitCount = 1;
				};
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXProjectFindModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXProjectWorkspaceModule" = {
				PBXProjectWorkspaceModule_StateKey_Rev39 = {
					PBXProjectWorkspaceModule_DEGV_Geometry = {
						_collapsingFrameDimension = 0;
						_indexOfCollapsedView = 0;
						_percentageOfCollapsedView = 0;
						isCollapsed = yes;
						sizes = (
							"{{0, 0}, {895, 0}}",
							"{{0, 0}, {895, 709}}",
						);
					};
					PBXProjectWorkspaceModule_DataSourceSelectionKey_Rev6 = {
						BoundsStr = "{{0, 0}, {880, 15}}";
						Rows = (
							0,
						);
						VisibleRectStr = "{{0, 0}, {0, 0}}";
					};
					PBXProjectWorkspaceModule_EditorOpen = true;
					PBXProjectWorkspaceModule_EmbeddedNavigatorGroup = {
						PBXSplitModuleInNavigatorKey = {
							Split0 = {
								bookmark = D360238406CC994A002C5AE1;
								history = (
									D3B4C2E706936531002E6624,
									D38FCD0F0694AB1C00ADF170,
									D3C85E6E0695F8D5003BCB83,
									D3C85EA906960621003BCB83,
									D3C85F1906961C69003BCB83,
									D32AE401069893DF00FDDDA1,
									D3D2126606A85B8600B86634,
									D3D2127106A85BBF00B86634,
									D3C6197F06B3045000BEF796,
									D3C619CC06B30C9A00BEF796,
									D3116C8406B3580000070847,
									D3AD599706B7029C00CD0BF4,
									D3AD59E106B709A100CD0BF4,
									D3AD59E606B70AF300CD0BF4,
									D3AD5ADB06B773A400CD0BF4,
									D3FECB2906BD95AD00C991DF,
									D3D9844206BF52A700243C21,
									D3D984C406C0260900243C21,
									D3D984E106C02FC700243C21,
									D30FCE0E06C0644500EE3947,
									D348FDF506C20EF600BEDA03,
									D310080406C9A5880050EC1B,
									D310082C06C9A7050050EC1B,
									D310084C06C9A8000050EC1B,
									D310085406C9A8AB0050EC1B,
									D360237306CC9924002C5AE1,
									D360237906CC9939002C5AE1,
									D360237D06CC993B002C5AE1,
									D360236F06CC9913002C5AE1,
								);
								prevStack = (
									D366899D067CDAF90009380A,
									D381D985068118CB00461949,
									D33FEB7D068CA70100787B33,
									D323B91F068E63E500A4C9F5,
									D34D2B83068FB8C500BECC99,
									D3B4C2E806936531002E6624,
									D3B4C34606938141002E6624,
									D38FCD160694AB2000ADF170,
									D3C85EF506961BEE003BCB83,
									D3C85F1306961C5C003BCB83,
									D3C8600B06962668003BCB83,
									D32AE402069893DF00FDDDA1,
									D37CA5BA06A1F811008B8319,
									D3D210E406A70DEB00B86634,
									D3D2127306A85BBF00B86634,
									D3C614D006B0629E00BEF796,
									D3AD59E706B70AF300CD0BF4,
									D3FECB3006BD95AF00C991DF,
									D3D984EA06C0342100243C21,
									D30FCE0F06C0644500EE3947,
									D348FDF606C20EF600BEDA03,
									D310080506C9A5880050EC1B,
									D360234906CC981C002C5AE1,
									D360234E06CC9826002C5AE1,
									D360235206CC983B002C5AE1,
									D360236306CC989C002C5AE1,
									D360236706CC989F002C5AE1,
									D360237006CC9913002C5AE1,
									D360237406CC9924002C5AE1,
									D360237A06CC9939002C5AE1,
									D360237E06CC993B002C5AE1,
								);
							};
							SplitCount = 1;
						};
					};
					PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
						PBXProjectWorkspaceModule_SGTM_Geometry = {
							_collapsingFrameDimension = 0;
							_indexOfCollapsedView = 0;
							_percentageOfCollapsedView = 0;
							sizes = (
								"{{0, 0}, {185, 709}}",
								"{{185, 0}, {895, 709}}",
							);
						};
					};
					PBXProjectWorkspaceModule_OldDetailFrame = "{{0, 0}, {895, 0}}";
					PBXProjectWorkspaceModule_OldEditorFrame = "{{0, 0}, {895, 709}}";
					PBXProjectWorkspaceModule_OldSuperviewFrame = "{{185, 0}, {895, 709}}";
					PBXProjectWorkspaceModule_SGTM = {
						PBXBottomSmartGroupGIDs = (
							1C37FBAC04509CD000000102,
							1C37FAAC04509CD000000102,
							1C08E77C0454961000C914BD,
							1C37FABC05509CD000000102,
							1C37FABC05539CD112110102,
							E2644B35053B69B200211256,
							1C37FABC04509CD000100104,
							1CC0EA4004350EF90044410B,
							1CC0EA4004350EF90041110B,
						);
						PBXSmartGroupTreeModuleColumnData = {
							PBXSmartGroupTreeModuleColumnWidthsKey = (
								168,
							);
							PBXSmartGroupTreeModuleColumnsKey_v4 = (
								MainColumn,
							);
						};
						PBXSmartGroupTreeModuleOutlineStateKey_v7 = {
							PBXSmartGroupTreeModuleOutlineStateExpansionKey = (
								08FB7794FE84155DC02AAC07,
								08FB7795FE84155DC02AAC07,
								34DAD9240667F94F0019DC0C,
								34DAD7A10667F2C70019DC0C,
								1AB674ADFE9D54B511CA2CBB,
								1C37FAAC04509CD000000102,
							);
							PBXSmartGroupTreeModuleOutlineStateSelectionKey = (
								(
									14,
									10,
									1,
									0,
								),
							);
							PBXSmartGroupTreeModuleOutlineStateVisibleRectKey = "{{0, 0}, {168, 691}}";
						};
						PBXTopSmartGroupGIDs = (
						);
					};
				};
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXRunSessionModule" = {
				LauncherConfigVersion = 3;
				Runner = {
					HorizontalSplitView = {
						_collapsingFrameDimension = 0;
						_indexOfCollapsedView = 0;
						_percentageOfCollapsedView = 0;
						isCollapsed = yes;
						sizes = (
							"{{0, 0}, {365, 167}}",
							"{{0, 176}, {365, 267}}",
						);
					};
					VerticalSplitView = {
						_collapsingFrameDimension = 0;
						_indexOfCollapsedView = 0;
						_percentageOfCollapsedView = 0;
						isCollapsed = yes;
						sizes = (
							"{{0, 0}, {405, 443}}",
							"{{414, 0}, {514, 443}}",
						);
					};
				};
			};
			PBXWorkspaceGeometries = (
				{
					Frame = "{{0, 0}, {1080, 709}}";
					PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
						PBXProjectWorkspaceModule_DebuggerWindowVisible = true;
					};
					RubberWindowFrame = "355 221 1080 751 0 0 1680 1028 ";
				},
			);
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXBuildResultsModule" = {
				Frame = "{{0, 0}, {480, 217}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "1142 580 480 238 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXDebugBreakpointsModule" = {
				BreakpointsTreeTableConfiguration = (
					enabledColumn,
					16,
					breakpointColumn,
					282.583,
				);
				Frame = "{{0, 0}, {208, 495}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "590 445 208 516 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXDebugCLIModule" = {
				Frame = "{{0, 0}, {400, 201}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "50 1000 400 222 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXDebugSessionModule" = {
				DebugConsoleDrawerSize = "{756, 120}";
				DebugConsoleVisible = Drawer;
				DebugConsoleWindowFrame = "{{200, 200}, {500, 300}}";
				DebugSTDIOWindowFrame = "{{-2, 115}, {1025, 180}}";
				Frame = "{{0, 0}, {802, 500}}";
				RubberWindowFrame = "794 355 802 542 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXDebugSingleDataValueViewModule" = {
				Frame = "{{0, 0}, {400, 49}}";
				RubberWindowFrame = "20 825 400 91 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXNavigatorGroup" = {
				Frame = "{{0, 0}, {750, 481}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "15 521 750 502 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXProjectFindModule" = {
				Frame = "{{0, 0}, {614, 316}}";
				RubberWindowFrame = "802 123 614 358 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXProjectWorkspaceModule" = {
				Frame = "{{0, 0}, {1080, 709}}";
				PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
					PBXProjectWorkspaceModule_BuildResultsWindowVisible = true;
					PBXProjectWorkspaceModule_RunWindowVisible = true;
				};
				RubberWindowFrame = "355 221 1080 751 0 0 1680 1028 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXRunSessionModule" = {
				Frame = "{{0, 0}, {1232, 353}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "211 288 1232 374 0 0 1680 1028 ";
			};
			PBXWorkspaceStateSaveDate = 114071275;
		};
		perUserProjectItems = {
			D30FCE0E06C0644500EE3947 = D30FCE0E06C0644500EE3947;
			D30FCE0F06C0644500EE3947 = D30FCE0F06C0644500EE3947;
			D310080406C9A5880050EC1B = D310080406C9A5880050EC1B;
			D310080506C9A5880050EC1B = D310080506C9A5880050EC1B;
			D310082C06C9A7050050EC1B = D310082C06C9A7050050EC1B;
			D310084C06C9A8000050EC1B = D310084C06C9A8000050EC1B;
			D310085406C9A8AB0050EC1B = D310085406C9A8AB0050EC1B;
			D3116C8406B3580000070847 = D3116C8406B3580000070847;
			D323B91F068E63E500A4C9F5 = D323B91F068E63E500A4C9F5;
			D32AE401069893DF00FDDDA1 = D32AE401069893DF00FDDDA1;
			D32AE402069893DF00FDDDA1 = D32AE402069893DF00FDDDA1;
			D33FEB7D068CA70100787B33 = D33FEB7D068CA70100787B33;
			D348FDF506C20EF600BEDA03 = D348FDF506C20EF600BEDA03;
			D348FDF606C20EF600BEDA03 = D348FDF606C20EF600BEDA03;
			D34D2B83068FB8C500BECC99 = D34D2B83068FB8C500BECC99;
			D360234906CC981C002C5AE1 = D360234906CC981C002C5AE1;
			D360234E06CC9826002C5AE1 = D360234E06CC9826002C5AE1;
			D360235206CC983B002C5AE1 = D360235206CC983B002C5AE1;
			D360236306CC989C002C5AE1 = D360236306CC989C002C5AE1;
			D360236706CC989F002C5AE1 = D360236706CC989F002C5AE1;
			D360237006CC9913002C5AE1 = D360237006CC9913002C5AE1;
			D360237306CC9924002C5AE1 = D360237306CC9924002C5AE1;
			D360237406CC9924002C5AE1 = D360237406CC9924002C5AE1;
			D360237A06CC9939002C5AE1 = D360237A06CC9939002C5AE1;
			D360237D06CC993B002C5AE1 = D360237D06CC993B002C5AE1;
			D360237E06CC993B002C5AE1 = D360237E06CC993B002C5AE1;
			D360238706CC997C002C5AE1 = D360238706CC997C002C5AE1;
			D360238B06CC997F002C5AE1 = D360238B06CC997F002C5AE1;
			D360239106CC9A23002C5AE1 = D360239106CC9A23002C5AE1;
			D360239406CC9A24002C5AE1 = D360239406CC9A24002C5AE1;
			D360239506CC9A24002C5AE1 = D360239506CC9A24002C5AE1;
			D360239906CC9D11002C5AE1 = D360239906CC9D11002C5AE1;
			D360239F06CC9EC6002C5AE1 = D360239F06CC9EC6002C5AE1;
			D366899D067CDAF90009380A = D366899D067CDAF90009380A;
			D37CA5BA06A1F811008B8319 = D37CA5BA06A1F811008B8319;
			D381D985068118CB00461949 = D381D985068118CB00461949;
			D38FCD0F0694AB1C00ADF170 = D38FCD0F0694AB1C00ADF170;
			D38FCD160694AB2000ADF170 = D38FCD160694AB2000ADF170;
			D3AD599706B7029C00CD0BF4 = D3AD599706B7029C00CD0BF4;
			D3AD59E106B709A100CD0BF4 = D3AD59E106B709A100CD0BF4;
			D3AD59E606B70AF300CD0BF4 = D3AD59E606B70AF300CD0BF4;
			D3AD59E706B70AF300CD0BF4 = D3AD59E706B70AF300CD0BF4;
			D3AD5ADB06B773A400CD0BF4 = D3AD5ADB06B773A400CD0BF4;
			D3B4C2E706936531002E6624 = D3B4C2E706936531002E6624;
			D3B4C2E806936531002E6624 = D3B4C2E806936531002E6624;
			D3B4C34606938141002E6624 = D3B4C34606938141002E6624;
			D3C614D006B0629E00BEF796 = D3C614D006B0629E00BEF796;
			D3C6197F06B3045000BEF796 = D3C6197F06B3045000BEF796;
			D3C619CC06B30C9A00BEF796 = D3C619CC06B30C9A00BEF796;
			D3C85E6E0695F8D5003BCB83 = D3C85E6E0695F8D5003BCB83;
			D3C85EA906960621003BCB83 = D3C85EA906960621003BCB83;
			D3C85EF506961BEE003BCB83 = D3C85EF506961BEE003BCB83;
			D3C85F1306961C5C003BCB83 = D3C85F1306961C5C003BCB83;
			D3C85F1906961C69003BCB83 = D3C85F1906961C69003BCB83;
			D3C8600B06962668003BCB83 = D3C8600B06962668003BCB83;
			D3D210E406A70DEB00B86634 = D3D210E406A70DEB00B86634;
			D3D2126606A85B8600B86634 = D3D2126606A85B8600B86634;
			D3D2127106A85BBF00B86634 = D3D2127106A85BBF00B86634;
			D3D2127306A85BBF00B86634 = D3D2127306A85BBF00B86634;
			D3D9844206BF52A700243C21 = D3D9844206BF52A700243C21;
			D3D984C406C0260900243C21 = D3D984C406C0260900243C21;
			D3D984E106C02FC700243C21 = D3D984E106C02FC700243C21;
			D3D984EA06C0342100243C21 = D3D984EA06C0342100243C21;
			D3FECB2906BD95AD00C991DF = D3FECB2906BD95AD00C991DF;
			D3FECB3006BD95AF00C991DF = D3FECB3006BD95AF00C991DF;
		};
		sourceControlManager = D3D97787067BEA30004CF65C;
		userBuildSettings = {
		};
	};
	340BD50A066F9D7800B257FE = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {881, 749}}";
			sepNavSelRange = "{0, 0}";
			sepNavVisRect = "{{0, 0}, {881, 749}}";
			sepNavWindowFrame = "{{222, 276}, {750, 558}}";
		};
	};
	340BD50B066F9D7800B257FE = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {850, 677}}";
			sepNavSelRange = "{180, 0}";
			sepNavVisRect = "{{0, 0}, {850, 677}}";
			sepNavWindowFrame = "{{61, 423}, {750, 558}}";
		};
	};
	3478150E06791F0B006507C7 = {
		fileEncoding = 30;
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = eqedge.c;
		path = /Users/piatek/Desktop/ridgerunner/eqedge.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	3478150F06791F0B006507C7 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {850, 2323}}";
			sepNavSelRange = "{451, 0}";
			sepNavVisRect = "{{0, 0}, {850, 677}}";
			sepNavWindowFrame = "{{61, 423}, {750, 558}}";
		};
	};
	3478151506791F46006507C7 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {817, 4731}}";
			sepNavSelRange = "{372, 0}";
			sepNavVisRect = "{{0, 0}, {817, 350}}";
			sepNavWindowFrame = "{{107, 381}, {750, 558}}";
		};
	};
	34DAD8510667F58A0019DC0C = {
		activeExec = 0;
		executables = (
			D3D97777067BEA23004CF65C,
		);
	};
	34DAD8D70667F7DF0019DC0C = {
		activeExec = 0;
		executables = (
			D3D97778067BEA23004CF65C,
		);
	};
	34DAD92B0667F9630019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {881, 358}}";
			sepNavSelRange = "{335, 0}";
			sepNavVisRect = "{{0, 0}, {881, 358}}";
			sepNavWindowFrame = "{{38, 444}, {750, 558}}";
		};
	};
	34DAD92C0667F9630019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {852, 2057}}";
			sepNavSelRange = "{1422, 0}";
			sepNavVisRect = "{{0, 548}, {852, 599}}";
			sepNavWindowFrame = "{{130, 360}, {750, 558}}";
		};
	};
	34DAD93C0667F99D0019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {850, 965}}";
			sepNavSelRange = "{987, 0}";
			sepNavVisRect = "{{0, 0}, {850, 677}}";
			sepNavWindowFrame = "{{15, 465}, {750, 558}}";
		};
	};
	34DAD93D0667F99D0019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {817, 405}}";
			sepNavSelRange = "{479, 0}";
			sepNavVisRect = "{{0, 30}, {817, 348}}";
		};
	};
	34DAD95A0667FA550019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {908, 1400}}";
			sepNavSelRange = "{1925, 0}";
			sepNavVisRect = "{{0, 485}, {850, 677}}";
			sepNavWindowFrame = "{{15, 465}, {750, 558}}";
		};
	};
	34DAD95B0667FA550019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {2084, 32171}}";
			sepNavSelRange = "{4749, 0}";
			sepNavVisRect = "{{0, 2669}, {850, 677}}";
			sepNavWindowFrame = "{{15, 465}, {750, 558}}";
		};
	};
	34DAD9830667FAD70019DC0C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {850, 3037}}";
			sepNavSelRange = "{3987, 0}";
			sepNavVisRect = "{{0, 2030}, {850, 677}}";
			sepNavWindowFrame = "{{61, 423}, {750, 558}}";
		};
	};
	8DD76F620486A84900D96B5E = {
		activeExec = 0;
		executables = (
			D3D97779067BEA23004CF65C,
		);
	};
	D30FCE0E06C0644500EE3947 = {
		exec = D3D97779067BEA23004CF65C;
		isa = PBXExecutableBookmark;
	};
	D30FCE0F06C0644500EE3947 = {
		exec = D3D97779067BEA23004CF65C;
		isa = PBXExecutableBookmark;
	};
	D31007CA06C9A5210050EC1B = {
		fileEncoding = 30;
		isa = PBXFileReference;
		name = taucs_ccs_order.c;
		path = /Users/piatek/Desktop/ridgerunner/tsnnls/taucs_basic/taucs_ccs_order.c;
		refType = 0;
		sourceTree = "<absolute>";
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {850, 11843}}";
			sepNavSelRange = "{15416, 0}";
			sepNavVisRect = "{{0, 8713}, {850, 677}}";
		};
	};
	D310080406C9A5880050EC1B = {
		fRef = D31007CA06C9A5210050EC1B;
		isa = PBXTextBookmark;
		name = "taucs_ccs_order.c: 633";
		rLen = 0;
		rLoc = 15416;
		rType = 0;
		vrLen = 1361;
		vrLoc = 15164;
	};
	D310080506C9A5880050EC1B = {
		fRef = D31007CA06C9A5210050EC1B;
		isa = PBXTextBookmark;
		name = "taucs_ccs_order.c: 633";
		rLen = 0;
		rLoc = 15416;
		rType = 0;
		vrLen = 1361;
		vrLoc = 15164;
	};
	D310082C06C9A7050050EC1B = {
		fRef = 3478150F06791F0B006507C7;
		isa = PBXTextBookmark;
		name = "display.c: 26";
		rLen = 0;
		rLoc = 451;
		rType = 0;
		vrLen = 938;
		vrLoc = 0;
	};
	D310084C06C9A8000050EC1B = {
		fRef = 34DAD95A0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.h: 68";
		rLen = 0;
		rLoc = 1925;
		rType = 0;
		vrLen = 1638;
		vrLoc = 734;
	};
	D310085406C9A8AB0050EC1B = {
		fRef = 34DAD93C0667F99D0019DC0C;
		isa = PBXTextBookmark;
		name = "errors.h: 39";
		rLen = 0;
		rLoc = 987;
		rType = 0;
		vrLen = 1361;
		vrLoc = 0;
	};
	D3116C8406B3580000070847 = {
		fRef = 340BD50A066F9D7800B257FE;
		isa = PBXTextBookmark;
		name = "settings.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 249;
		vrLoc = 0;
	};
	D323B91F068E63E500A4C9F5 = {
		fRef = 3478150E06791F0B006507C7;
		isa = PBXTextBookmark;
		name = refresh_display;
		rLen = 15;
		rLoc = 8217;
		rType = 0;
		vrLen = 1155;
		vrLoc = 7533;
	};
	D32AE3EF0698932F00FDDDA1 = {
		fileReference = 34DAD9830667FAD70019DC0C;
		functionName = "main()";
		isa = PBXFileBreakpoint;
		lineNumber = 27;
		state = 1;
	};
	D32AE401069893DF00FDDDA1 = {
		fRef = D32AE406069893E100FDDDA1;
		isa = PBXTextBookmark;
		name = "/*\n\n   eqedge.c : A linear algebra solver demo showing dynamic edge \n              equilateralization using LAPACK and TAUCS. The program\n\t      is a bit of a monster, but is designed to check the \n\t      TAUCS interface code against LAPACK.\n\n\t      We must link with octrope to get the link reading and \n\t      simple vector arithmetic required.\n\n*/\n\n#include\"eqedge.h\"\n\n#include <vecLib/vBLAS.h>\n#include <vecLib/clapack.h>\n\n\nvoid    clapack_matrix_write(double val, double *A, int LDA, int i, int j)\n\n     /* Function writes val to position (i,j) in the LDAxN lapack matrix A. */\n\n{\n  A[j*LDA + i] = val;\n}\n\ndouble  clapack_matrix_read(double *A, int LDA, int i, int j)\n\n     /* Function returns a value from position (i,j) in LDA x N lapack matrix A. */\n\n{\n  return A[j*LDA + i];\n}\n\nvoid    clapack_matrix_print(double *A, int M, int N) \n\n     /* Function prints the M x N lapack matrix A. */\n\n{\n  int i, j;\n\n  for(i=0;i<M;i++) {\n  \n    for(j=0;j<N;j++) {\n\n      printf(\"%3.2g \",clapack_matrix_read(A,M,i,j));\n\n    }\n\n    printf(\"\\n\");\n\n  }\n\n  printf(\"\\n\");\n\n}\n\ndouble *tangential_rigidity_matrix(octrope_link *L, int comp, int *LDA, int *N)\n\n     /* Function returns a pointer to an LDAxN lapack-style matrix which encodes\n\tthe change in edge lengths of component <comp> under the tangential variation \n\tof its vertices. */\n\n{\n\n  int i;\n  double *A;\n  octrope_vector LeftTan,RightTan,EdgeDir;\n\n  /* \n     \n     We first allocate the matrix A. The dimensions of A are:\n\n        <# of edges of <comp>> x <#of vertices of <comp>>  \n\n     The number of edges is equal to the number of vertices if\n     the polyline is closed (acylic == FALSE) and is one less than\n     the number of vertices otherwise.\n\n  */\n\n  *LDA = octrope_pline_edges(&L->cp[comp]);\n  *N   = L->cp[comp].nv;\n\n  A = calloc( (*LDA) * (*N), sizeof(double) );\n\n  /* We now fill the matrix. */\n\n  for(i=0;i<L->cp[comp].nv-1;i++) {\n\n    /* The i,j th entry is the effect on the length of edge i of moving vertex j. */\n    /* This is nonzero only when j is an endpoint of the edge, so we first collect */\n    /* the tangent vectors at the ends of the edge. */\n\n    LeftTan = octrope_link_tangent_vector(L,comp,i);\n    RightTan = octrope_link_tangent_vector(L,comp,i+1);\n    EdgeDir = octrope_link_edge_dir(L,comp,i);\n\n    clapack_matrix_write( -octrope_dot(EdgeDir,LeftTan) ,A,*LDA,i,i  );\n    clapack_matrix_write( octrope_dot(EdgeDir,RightTan),A,*LDA,i,i+1);\n\n  }\n\n  /* If we have a wraparound edge, it has to be handled with \n     special care. */\n\n  \n  if (!L->cp[comp].acyclic) {\n\n    LeftTan = octrope_link_tangent_vector(L,comp,i);\n    RightTan = octrope_link_tangent_vector(L,comp,0);\n    EdgeDir = octrope_link_edge_dir(L,comp,i);\n\n    clapack_matrix_write( -octrope_dot(EdgeDir,LeftTan) ,A,*LDA,i,i);\n    clapack_matrix_write( octrope_dot(EdgeDir,RightTan),A,*LDA,i,0);\n\n  } \n\n  if (VERBOSITY > 4) {\n\n    printf(\"tangential_rigidity_matrix. Constructed matrix: \\n\\n\");\n    clapack_matrix_print(A,*LDA,*N);\n\n  }\n\n  return A;\n  \n}\n\ndouble *edgelength_error(octrope_link *L,int comp, double target_length)\n\n     /* Procedure computes the difference between each edge length and\n\tthe \"target\" value of octrope_pline_length/octrope_pline_edges,\n\tand returns it as a vector.  The argument LDB returns the number\n        of rows in this vector. */\n\n{\n  double *Err;\n  int    i,edges;\n\n  octrope_vector V;\n\n  edges = octrope_pline_edges(&(L->cp[comp]));\n  Err = calloc(edges,sizeof(double));\n  \n  /* We now compute the raw edge lengths and total length. */\n\n  for(i=0;i<edges;i++) {\n\n    V = L->cp[comp].vt[i];\n    octrope_vsub(V,L->cp[comp].vt[i+1]);      \n    Err[i] = octrope_norm(V);\n    \n  }\n\n  /* We now correct by subtracting the average (target) from each length. */\n\n  for(i=0;i<edges;i++) {\n\n    Err[i] -= target_length;\n\n  }\n\n  /* The remaining entries in \"Err\" are the edgelength errors. */\n\n  return Err;\n\n}\n\nvoid lapack_eqedge(octrope_link *L, int nsteps)\n\n     /* Procedure equilateralizes L using <nsteps> Newton steps.\n\tThis procedure should converge exponentially in <nsteps>, with good stability\n\tas long as L is not far from equilateral to begin with. \n\n\tThe solution algorithm is as follows.\n\n\tFor each component of L:\n\n\t1) Find the rigidity matrix A which transforms a tangential \n\t   variation of the vertices of L->cp[comp] (in R^V) to a \n\t   variation of the edge lengths of L->cp[comp] (in R^V or R^{V-1}). \n\n        2) Find the errors Err in edge lengths of L->cp[comp].\n\n\t3) Solve the (underdetermined) least-squares problem \n\n\t       Ax = -Err,\n\n\t   using the LAPACK routine DGELSS to find the minimum norm\n\t   variation x which eliminates edge-length errors to first \n\t   order. \n\n        4) Step in that direction.\n\n\t5) Repeat <nsteps> times.\n\n     */\n\t\n{\n\n  __CLPK_doublereal *A, *Err, *S;\n  __CLPK_integer     LDA, M,N, NRHS, LDB, RANK, LWORK, INFO;\n  __CLPK_doublereal *WORK, RCOND, *B;\n  int    step, comp;\n  double target_length;\n\n  octrope_vector stepV;\n\n  int    i;\n  \n  // we pretend\n\n  if (VERBOSITY > 2) {\t\t/* Debugging code records function entry. */\n\n    fprintf(stderr,\"lapack_eqedge called. \\n\\n\");\n    fprintf(stderr,\"  %d component link.\\n\",L->nc);\n\n  }\n\n  if (GRAPHICS) {\n\n    refresh_display(L);\n    i = 1;\n  }\n\n  for(comp = 0;comp < L->nc; comp++) {\n\n    target_length = octrope_pline_length(&L->cp[comp])/(double)(octrope_pline_edges(&L->cp[comp]));\n\n    for(step = 0; step < nsteps; step++) {\n\n\t\t  if (VERBOSITY > 3) {\t/* Track maximum Errors before step. */\n\n\t\t\tfprintf(stderr,\"    %d vertex component (# %d)\\n\",L->cp[comp].nv,comp);\n\t\t\tfprintf(stderr,\"    maxErr before step %d = %g.\\n\",step,maxError(L,comp,target_length));\n\t\t\tfprintf(stderr,\"    max/min before step %d = %g.\\n\\n\",step,octrope_link_long_edge(L)/octrope_link_short_edge(L));\n\n\t\t  }\n\n\t\t  /* 1) Find the rigidity matrix. */\n\n\t\t  A = (__CLPK_doublereal *)(tangential_rigidity_matrix(L,comp,(int *)(&LDA),(int *)(&N)));\n\n\t\t  /* 2) Find the edge length errors. */\n\n\t\t  Err = (__CLPK_doublereal *)(edgelength_error(L,comp,target_length));\n\n\t\t  /* 3) Solve the least-squares problem */\n\n\t\t  LWORK = 20*LDA;\n\t\t  WORK = malloc(LWORK*sizeof(double));\n\t\t  M = LDA; NRHS = 1; \n\t\t  RCOND = -1.0; /* Use machine precision */\n\t\t  S = malloc(M*sizeof(double));\n\t\t  \n\t\t  /* We now set up the RHS B. Paradoxically, though B is a vector of length M (# edges),\n\t\t we must allocate a vector of length _N_ (3 * # verts) because this space will be \n\t\t overwritten by the least-squares _solution_ to the problem.\n\n\t\t We similarly set LDB = N even though there are only M nonzero elements when we \n\t\t pass B to dgelss. */\n\n\t\t  B = calloc(N,sizeof(double));\n\n\t\t  for(i=0;i<M;i++) {\n\n\t\t\t\tB[i] = Err[i];\n\n\t\t  } \n\n\t\t  LDB = N;\n\n\t\t  /* We now call dgelss_, the underdetermined least-squares solver. */\n\t\t  \t\t  \n\t\t  dgelss_(&M, &N, &NRHS, A, &LDA, B, &LDB, S, &RCOND, &RANK, WORK, &LWORK, &INFO);\n\n\t\t  /* We now check INFO to make sure the method converged. */\n\n\t\t  if (INFO != 0) {\n\n\t\t\tif (INFO < 0) {\n\n\t\t\t  fprintf(stderr,\"lapack_eqedge: cDGELSS reports illegal %d th argument.\\n\",(int)(-INFO));\n\t\t\t  exit(1);\n\n\t\t\t} else {\n\n\t\t\t  fprintf(stderr,\"lapack_eqedge: cDGELSS couldn't find SVD for rigidity matrix.\\n\");\n\t\t\t  exit(1);\n\n\t\t\t}\n\n\t\t  }\n\n\t\t  /* 4) Take a Newton step. */\n\n\t\t  for(i=0;i<L->cp[comp].nv;i++) {\n\n\t\t\tstepV = octrope_link_tangent_vector(L,comp,i);\n\t\t\toctrope_vsmult(B[i],stepV);\n\t\t\toctrope_vsub((L->cp[comp].vt[i]),stepV);\n\n\t\t  }\n\n      octrope_link_fix_wrap(L);\n\n      if (VERBOSITY > 3) { /* Report on the step we just took. */\n\n\t\tdouble maxStep;\n\n\t\tfor(maxStep = 0,i=0;i<LDB;i++) {\n\n\t\t  maxStep = (maxStep > fabs((double)(B[i])) ? maxStep : fabs((double)(B[i])));\n\n\t\t}\n\t\t\t\t \n\t\tfprintf(stderr,\"   Maximum coordinate movement %g.\\n\",maxStep);\n\t\tfprintf(stderr,\"   Maximum error after step    %g.\\n\",maxError(L,comp,target_length));\n\t\tfprintf(stderr,\"   max/min after step          %g.\\n\\n\",octrope_link_long_edge(L)/octrope_link_short_edge(L));\n\n      }\n\n      if (GRAPHICS) {\n\n\t\trefresh_display(L);\n\n      }\n\n      /* 5) Free the memory that we allocated. */\n\n      free(WORK); free(S); free(A); free(Err); free(B);\n\n    }\n\n  } /* End of main stepping loop. */\n\n}\n\ndouble maxError(octrope_link *L, int comp, double target_length) \n\n     /* Computes the maximum error in edge lengths. */\n\n{\n  int i;\n  double maxE = 0, *Err;\n  \n  Err = edgelength_error(L,comp,target_length);\n  \n  for(i=0;i<octrope_pline_edges(&L->cp[comp]);i++) {\n\n    maxE = (fabs(Err[i]) > maxE) ? fabs(Err[i]) : maxE;\n\n  }\n\n  free(Err);\n  return maxE;\n\n}\n/*\nint main()\n\n{\n \n  gclpipe = fopen(\"/tmp/OOGL\",\"w\");\n\n  fprintf(gclpipe,\"(normalization g0 none)\\n\");\n  fprintf(gclpipe,\"(bbox-draw g0 no)\\n\");\n\n  VERBOSITY = 4;\n  GRAPHICS = TRUE;\n\n  segment_demo();\n  ellipse_demo();\n\n  fclose(gclpipe);\n\n\n\treturn 0;\n}\n  */\n  \n  \n\n  \n";
		rLen = 8769;
		rLoc = 0;
		rType = 0;
		vrLen = 1066;
		vrLoc = 0;
	};
	D32AE402069893DF00FDDDA1 = {
		fRef = D32AE404069893E100FDDDA1;
		isa = PBXTextBookmark;
		name = "/*\n\n   eqedge.c : A linear algebra solver demo showing dynamic edge \n              equilateralization using LAPACK and TAUCS. The program\n\t      is a bit of a monster, but is designed to check the \n\t      TAUCS interface code against LAPACK.\n\n\t      We must link with octrope to get the link reading and \n\t      simple vector arithmetic required.\n\n*/\n\n#include\"eqedge.h\"\n\n#include <vecLib/vBLAS.h>\n#include <vecLib/clapack.h>\n\n\nvoid    clapack_matrix_write(double val, double *A, int LDA, int i, int j)\n\n     /* Function writes val to position (i,j) in the LDAxN lapack matrix A. */\n\n{\n  A[j*LDA + i] = val;\n}\n\ndouble  clapack_matrix_read(double *A, int LDA, int i, int j)\n\n     /* Function returns a value from position (i,j) in LDA x N lapack matrix A. */\n\n{\n  return A[j*LDA + i];\n}\n\nvoid    clapack_matrix_print(double *A, int M, int N) \n\n     /* Function prints the M x N lapack matrix A. */\n\n{\n  int i, j;\n\n  for(i=0;i<M;i++) {\n  \n    for(j=0;j<N;j++) {\n\n      printf(\"%3.2g \",clapack_matrix_read(A,M,i,j));\n\n    }\n\n    printf(\"\\n\");\n\n  }\n\n  printf(\"\\n\");\n\n}\n\ndouble *tangential_rigidity_matrix(octrope_link *L, int comp, int *LDA, int *N)\n\n     /* Function returns a pointer to an LDAxN lapack-style matrix which encodes\n\tthe change in edge lengths of component <comp> under the tangential variation \n\tof its vertices. */\n\n{\n\n  int i;\n  double *A;\n  octrope_vector LeftTan,RightTan,EdgeDir;\n\n  /* \n     \n     We first allocate the matrix A. The dimensions of A are:\n\n        <# of edges of <comp>> x <#of vertices of <comp>>  \n\n     The number of edges is equal to the number of vertices if\n     the polyline is closed (acylic == FALSE) and is one less than\n     the number of vertices otherwise.\n\n  */\n\n  *LDA = octrope_pline_edges(&L->cp[comp]);\n  *N   = L->cp[comp].nv;\n\n  A = calloc( (*LDA) * (*N), sizeof(double) );\n\n  /* We now fill the matrix. */\n\n  for(i=0;i<L->cp[comp].nv-1;i++) {\n\n    /* The i,j th entry is the effect on the length of edge i of moving vertex j. */\n    /* This is nonzero only when j is an endpoint of the edge, so we first collect */\n    /* the tangent vectors at the ends of the edge. */\n\n    LeftTan = octrope_link_tangent_vector(L,comp,i);\n    RightTan = octrope_link_tangent_vector(L,comp,i+1);\n    EdgeDir = octrope_link_edge_dir(L,comp,i);\n\n    clapack_matrix_write( -octrope_dot(EdgeDir,LeftTan) ,A,*LDA,i,i  );\n    clapack_matrix_write( octrope_dot(EdgeDir,RightTan),A,*LDA,i,i+1);\n\n  }\n\n  /* If we have a wraparound edge, it has to be handled with \n     special care. */\n\n  \n  if (!L->cp[comp].acyclic) {\n\n    LeftTan = octrope_link_tangent_vector(L,comp,i);\n    RightTan = octrope_link_tangent_vector(L,comp,0);\n    EdgeDir = octrope_link_edge_dir(L,comp,i);\n\n    clapack_matrix_write( -octrope_dot(EdgeDir,LeftTan) ,A,*LDA,i,i);\n    clapack_matrix_write( octrope_dot(EdgeDir,RightTan),A,*LDA,i,0);\n\n  } \n\n  if (VERBOSITY > 4) {\n\n    printf(\"tangential_rigidity_matrix. Constructed matrix: \\n\\n\");\n    clapack_matrix_print(A,*LDA,*N);\n\n  }\n\n  return A;\n  \n}\n\ndouble *edgelength_error(octrope_link *L,int comp, double target_length)\n\n     /* Procedure computes the difference between each edge length and\n\tthe \"target\" value of octrope_pline_length/octrope_pline_edges,\n\tand returns it as a vector.  The argument LDB returns the number\n        of rows in this vector. */\n\n{\n  double *Err;\n  int    i,edges;\n\n  octrope_vector V;\n\n  edges = octrope_pline_edges(&(L->cp[comp]));\n  Err = calloc(edges,sizeof(double));\n  \n  /* We now compute the raw edge lengths and total length. */\n\n  for(i=0;i<edges;i++) {\n\n    V = L->cp[comp].vt[i];\n    octrope_vsub(V,L->cp[comp].vt[i+1]);      \n    Err[i] = octrope_norm(V);\n    \n  }\n\n  /* We now correct by subtracting the average (target) from each length. */\n\n  for(i=0;i<edges;i++) {\n\n    Err[i] -= target_length;\n\n  }\n\n  /* The remaining entries in \"Err\" are the edgelength errors. */\n\n  return Err;\n\n}\n\nvoid lapack_eqedge(octrope_link *L, int nsteps)\n\n     /* Procedure equilateralizes L using <nsteps> Newton steps.\n\tThis procedure should converge exponentially in <nsteps>, with good stability\n\tas long as L is not far from equilateral to begin with. \n\n\tThe solution algorithm is as follows.\n\n\tFor each component of L:\n\n\t1) Find the rigidity matrix A which transforms a tangential \n\t   variation of the vertices of L->cp[comp] (in R^V) to a \n\t   variation of the edge lengths of L->cp[comp] (in R^V or R^{V-1}). \n\n        2) Find the errors Err in edge lengths of L->cp[comp].\n\n\t3) Solve the (underdetermined) least-squares problem \n\n\t       Ax = -Err,\n\n\t   using the LAPACK routine DGELSS to find the minimum norm\n\t   variation x which eliminates edge-length errors to first \n\t   order. \n\n        4) Step in that direction.\n\n\t5) Repeat <nsteps> times.\n\n     */\n\t\n{\n\n  __CLPK_doublereal *A, *Err, *S;\n  __CLPK_integer     LDA, M,N, NRHS, LDB, RANK, LWORK, INFO;\n  __CLPK_doublereal *WORK, RCOND, *B;\n  int    step, comp;\n  double target_length;\n\n  octrope_vector stepV;\n\n  int    i;\n  \n  // we pretend\n\n  if (VERBOSITY > 2) {\t\t/* Debugging code records function entry. */\n\n    fprintf(stderr,\"lapack_eqedge called. \\n\\n\");\n    fprintf(stderr,\"  %d component link.\\n\",L->nc);\n\n  }\n\n  if (GRAPHICS) {\n\n    refresh_display(L);\n    i = 1;\n  }\n\n  for(comp = 0;comp < L->nc; comp++) {\n\n    target_length = octrope_pline_length(&L->cp[comp])/(double)(octrope_pline_edges(&L->cp[comp]));\n\n    for(step = 0; step < nsteps; step++) {\n\n\t\t  if (VERBOSITY > 3) {\t/* Track maximum Errors before step. */\n\n\t\t\tfprintf(stderr,\"    %d vertex component (# %d)\\n\",L->cp[comp].nv,comp);\n\t\t\tfprintf(stderr,\"    maxErr before step %d = %g.\\n\",step,maxError(L,comp,target_length));\n\t\t\tfprintf(stderr,\"    max/min before step %d = %g.\\n\\n\",step,octrope_link_long_edge(L)/octrope_link_short_edge(L));\n\n\t\t  }\n\n\t\t  /* 1) Find the rigidity matrix. */\n\n\t\t  A = (__CLPK_doublereal *)(tangential_rigidity_matrix(L,comp,(int *)(&LDA),(int *)(&N)));\n\n\t\t  /* 2) Find the edge length errors. */\n\n\t\t  Err = (__CLPK_doublereal *)(edgelength_error(L,comp,target_length));\n\n\t\t  /* 3) Solve the least-squares problem */\n\n\t\t  LWORK = 20*LDA;\n\t\t  WORK = malloc(LWORK*sizeof(double));\n\t\t  M = LDA; NRHS = 1; \n\t\t  RCOND = -1.0; /* Use machine precision */\n\t\t  S = malloc(M*sizeof(double));\n\t\t  \n\t\t  /* We now set up the RHS B. Paradoxically, though B is a vector of length M (# edges),\n\t\t we must allocate a vector of length _N_ (3 * # verts) because this space will be \n\t\t overwritten by the least-squares _solution_ to the problem.\n\n\t\t We similarly set LDB = N even though there are only M nonzero elements when we \n\t\t pass B to dgelss. */\n\n\t\t  B = calloc(N,sizeof(double));\n\n\t\t  for(i=0;i<M;i++) {\n\n\t\t\t\tB[i] = Err[i];\n\n\t\t  } \n\n\t\t  LDB = N;\n\n\t\t  /* We now call dgelss_, the underdetermined least-squares solver. */\n\t\t  \t\t  \n\t\t  dgelss_(&M, &N, &NRHS, A, &LDA, B, &LDB, S, &RCOND, &RANK, WORK, &LWORK, &INFO);\n\n\t\t  /* We now check INFO to make sure the method converged. */\n\n\t\t  if (INFO != 0) {\n\n\t\t\tif (INFO < 0) {\n\n\t\t\t  fprintf(stderr,\"lapack_eqedge: cDGELSS reports illegal %d th argument.\\n\",(int)(-INFO));\n\t\t\t  exit(1);\n\n\t\t\t} else {\n\n\t\t\t  fprintf(stderr,\"lapack_eqedge: cDGELSS couldn't find SVD for rigidity matrix.\\n\");\n\t\t\t  exit(1);\n\n\t\t\t}\n\n\t\t  }\n\n\t\t  /* 4) Take a Newton step. */\n\n\t\t  for(i=0;i<L->cp[comp].nv;i++) {\n\n\t\t\tstepV = octrope_link_tangent_vector(L,comp,i);\n\t\t\toctrope_vsmult(B[i],stepV);\n\t\t\toctrope_vsub((L->cp[comp].vt[i]),stepV);\n\n\t\t  }\n\n      octrope_link_fix_wrap(L);\n\n      if (VERBOSITY > 3) { /* Report on the step we just took. */\n\n\t\tdouble maxStep;\n\n\t\tfor(maxStep = 0,i=0;i<LDB;i++) {\n\n\t\t  maxStep = (maxStep > fabs((double)(B[i])) ? maxStep : fabs((double)(B[i])));\n\n\t\t}\n\t\t\t\t \n\t\tfprintf(stderr,\"   Maximum coordinate movement %g.\\n\",maxStep);\n\t\tfprintf(stderr,\"   Maximum error after step    %g.\\n\",maxError(L,comp,target_length));\n\t\tfprintf(stderr,\"   max/min after step          %g.\\n\\n\",octrope_link_long_edge(L)/octrope_link_short_edge(L));\n\n      }\n\n      if (GRAPHICS) {\n\n\t\trefresh_display(L);\n\n      }\n\n      /* 5) Free the memory that we allocated. */\n\n      free(WORK); free(S); free(A); free(Err); free(B);\n\n    }\n\n  } /* End of main stepping loop. */\n\n}\n\ndouble maxError(octrope_link *L, int comp, double target_length) \n\n     /* Computes the maximum error in edge lengths. */\n\n{\n  int i;\n  double maxE = 0, *Err;\n  \n  Err = edgelength_error(L,comp,target_length);\n  \n  for(i=0;i<octrope_pline_edges(&L->cp[comp]);i++) {\n\n    maxE = (fabs(Err[i]) > maxE) ? fabs(Err[i]) : maxE;\n\n  }\n\n  free(Err);\n  return maxE;\n\n}\n/*\nint main()\n\n{\n \n  gclpipe = fopen(\"/tmp/OOGL\",\"w\");\n\n  fprintf(gclpipe,\"(normalization g0 none)\\n\");\n  fprintf(gclpipe,\"(bbox-draw g0 no)\\n\");\n\n  VERBOSITY = 4;\n  GRAPHICS = TRUE;\n\n  segment_demo();\n  ellipse_demo();\n\n  fclose(gclpipe);\n\n\n\treturn 0;\n}\n  */\n  \n  \n\n  \n";
		rLen = 8769;
		rLoc = 0;
		rType = 0;
		vrLen = 1066;
		vrLoc = 0;
	};
	D32AE404069893E100FDDDA1 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = OLDeqedge.c;
		path = /Users/piatek/Desktop/ridgerunner/gradient/OLDeqedge.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D32AE406069893E100FDDDA1 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = OLDeqedge.c;
		path = /Users/piatek/Desktop/ridgerunner/gradient/OLDeqedge.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D33FEB7D068CA70100787B33 = {
		fRef = 34DAD93D0667F99D0019DC0C;
		isa = PBXTextBookmark;
		name = "errors.c: 25";
		rLen = 0;
		rLoc = 479;
		rType = 0;
		vrLen = 561;
		vrLoc = 0;
	};
	D348FDF506C20EF600BEDA03 = {
		fRef = D3EB212506C18E90003BF461;
		isa = PBXTextBookmark;
		name = "test_prog.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 973;
		vrLoc = 173;
	};
	D348FDF606C20EF600BEDA03 = {
		fRef = D3EB212506C18E90003BF461;
		isa = PBXTextBookmark;
		name = "test_prog.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 973;
		vrLoc = 173;
	};
	D34D2B83068FB8C500BECC99 = {
		fRef = 3478150F06791F0B006507C7;
		isa = PBXTextBookmark;
		name = "display.c: 3";
		rLen = 0;
		rLoc = 21;
		rType = 0;
		vrLen = 1244;
		vrLoc = 2;
	};
	D360234906CC981C002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 2034";
		rLen = 0;
		rLoc = 65915;
		rType = 0;
		vrLen = 1508;
		vrLoc = 65177;
	};
	D360234E06CC9826002C5AE1 = {
		exec = D3D97778067BEA23004CF65C;
		isa = PBXExecutableBookmark;
		uiCtxt = {
			buildSettingsExpandedSubviews = (
				0,
				1,
				2,
				3,
				4,
				5,
			);
			buildSettingsVisRect = "{{0, 0}, {880, 660}}";
		};
	};
	D360235206CC983B002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 104";
		rLen = 0;
		rLoc = 2288;
		rType = 0;
		vrLen = 1158;
		vrLoc = 1096;
	};
	D360236306CC989C002C5AE1 = {
		exec = D3D97778067BEA23004CF65C;
		isa = PBXExecutableBookmark;
		uiCtxt = {
			buildSettingsExpandedSubviews = (
				0,
				1,
				2,
				3,
				4,
				5,
			);
			buildSettingsVisRect = "{{0, 0}, {880, 660}}";
		};
	};
	D360236706CC989F002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 69";
		rLen = 0;
		rLoc = 1437;
		rType = 0;
		vrLen = 1158;
		vrLoc = 1096;
	};
	D360236A06CC98BC002C5AE1 = {
		fileReference = 34DAD95B0667FA550019DC0C;
		functionName = "bsearch_stepper()";
		isa = PBXFileBreakpoint;
		lineNumber = 259;
		state = 1;
	};
	D360236C06CC98FA002C5AE1 = {
		fileReference = 34DAD95B0667FA550019DC0C;
		functionName = "firstVariation()";
		isa = PBXFileBreakpoint;
		lineNumber = 1908;
		state = 1;
	};
	D360237006CC9913002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 1908";
		rLen = 0;
		rLoc = 60978;
		rType = 0;
		vrLen = 1940;
		vrLoc = 59799;
	};
	D360237306CC9924002C5AE1 = {
		exec = D3D97778067BEA23004CF65C;
		isa = PBXExecutableBookmark;
		uiCtxt = {
			buildSettingsExpandedSubviews = (
				0,
				1,
				2,
				3,
				4,
				5,
			);
			buildSettingsVisRect = "{{0, 0}, {880, 660}}";
		};
	};
	D360237406CC9924002C5AE1 = {
		exec = D3D97778067BEA23004CF65C;
		isa = PBXExecutableBookmark;
		uiCtxt = {
			buildSettingsExpandedSubviews = (
				0,
				1,
				2,
				3,
				4,
				5,
			);
			buildSettingsVisRect = "{{0, 0}, {880, 660}}";
		};
	};
	D360237A06CC9939002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = factor;
		rLen = 6;
		rLoc = 3591;
		rType = 0;
		vrLen = 1167;
		vrLoc = 3289;
	};
	D360237D06CC993B002C5AE1 = {
		fRef = 340BD50B066F9D7800B257FE;
		isa = PBXTextBookmark;
		name = "settings.c: 11";
		rLen = 0;
		rLoc = 180;
		rType = 0;
		vrLen = 210;
		vrLoc = 0;
	};
	D360237E06CC993B002C5AE1 = {
		fRef = 340BD50B066F9D7800B257FE;
		isa = PBXTextBookmark;
		name = "settings.c: 11";
		rLen = 0;
		rLoc = 180;
		rType = 0;
		vrLen = 210;
		vrLoc = 0;
	};
	D360238106CC9943002C5AE1 = {
		fileReference = 34DAD95B0667FA550019DC0C;
		functionName = "placeMinradStruts()";
		isa = PBXFileBreakpoint;
		lineNumber = 1064;
		state = 1;
	};
	D360238306CC9948002C5AE1 = {
		fileReference = 34DAD95B0667FA550019DC0C;
		functionName = "minradForce()";
		isa = PBXFileBreakpoint;
		lineNumber = 1320;
		state = 1;
	};
	D360238706CC997C002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 1836";
		rLen = 0;
		rLoc = 58595;
		rType = 0;
		vrLen = 1598;
		vrLoc = 56544;
	};
	D360238B06CC997F002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 181";
		rLen = 0;
		rLoc = 3987;
		rType = 0;
		vrLen = 1152;
		vrLoc = 3097;
	};
	D360239106CC9A23002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 1702";
		rLen = 0;
		rLoc = 54031;
		rType = 0;
		vrLen = 1934;
		vrLoc = 52823;
	};
	D360239406CC9A24002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 181";
		rLen = 0;
		rLoc = 3987;
		rType = 0;
		vrLen = 1151;
		vrLoc = 3097;
	};
	D360239506CC9A24002C5AE1 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 181";
		rLen = 0;
		rLoc = 3987;
		rType = 0;
		vrLen = 1151;
		vrLoc = 3097;
	};
	D360239906CC9D11002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 1702";
		rLen = 0;
		rLoc = 54030;
		rType = 0;
		vrLen = 2033;
		vrLoc = 53042;
	};
	D360239E06CC9D1A002C5AE1 = {
		fileReference = 34DAD95B0667FA550019DC0C;
		functionName = "bsearch_stepper()";
		isa = PBXFileBreakpoint;
		lineNumber = 208;
		state = 1;
	};
	D360239F06CC9EC6002C5AE1 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 203";
		rLen = 0;
		rLoc = 4749;
		rType = 0;
		vrLen = 1356;
		vrLoc = 4545;
	};
	D366899D067CDAF90009380A = {
		fRef = 34DAD92C0667F9630019DC0C;
		isa = PBXTextBookmark;
		name = "dlen.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1060;
		vrLoc = 0;
	};
	D37CA5BA06A1F811008B8319 = {
		fRef = 340BD50A066F9D7800B257FE;
		isa = PBXTextBookmark;
		name = "settings.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 249;
		vrLoc = 0;
	};
	D381D985068118CB00461949 = {
		fRef = 340BD50B066F9D7800B257FE;
		isa = PBXTextBookmark;
		name = "settings.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 210;
		vrLoc = 0;
	};
	D38AB4DB068D1E5D00A3E679 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.h;
		name = clapack.h;
		path = /System/Library/Frameworks/vecLib.framework/Versions/A/Headers/clapack.h;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D38FCD0F0694AB1C00ADF170 = {
		fRef = 3478150E06791F0B006507C7;
		isa = PBXTextBookmark;
		name = RCOND;
		rLen = 5;
		rLoc = 5122;
		rType = 0;
		vrLen = 1294;
		vrLoc = 4392;
	};
	D38FCD160694AB2000ADF170 = {
		fRef = D38AB4DB068D1E5D00A3E679;
		isa = PBXTextBookmark;
		name = dgecon_;
		rLen = 7;
		rLoc = 80126;
		rType = 0;
		vrLen = 3930;
		vrLoc = 78276;
	};
	D3AD599706B7029C00CD0BF4 = {
		fRef = D3C85EF806961C34003BCB83;
		isa = PBXTextBookmark;
		name = "eqedge.h: 62";
		rLen = 0;
		rLoc = 1770;
		rType = 0;
		vrLen = 1571;
		vrLoc = 334;
	};
	D3AD59E106B709A100CD0BF4 = {
		fRef = D3B4C2DD06936514002E6624;
		isa = PBXTextBookmark;
		name = octrope_link_write;
		rLen = 18;
		rLoc = 1633;
		rType = 0;
		vrLen = 1608;
		vrLoc = 463;
	};
	D3AD59E606B70AF300CD0BF4 = {
		fRef = 3478151506791F46006507C7;
		isa = PBXTextBookmark;
		name = octrope_link_write;
		rLen = 18;
		rLoc = 6275;
		rType = 0;
		vrLen = 1084;
		vrLoc = 5763;
	};
	D3AD59E706B70AF300CD0BF4 = {
		fRef = 3478151506791F46006507C7;
		isa = PBXTextBookmark;
		name = octrope_link_write;
		rLen = 18;
		rLoc = 6275;
		rType = 0;
		vrLen = 1084;
		vrLoc = 5763;
	};
	D3AD5ADB06B773A400CD0BF4 = {
		fRef = 34DAD93D0667F99D0019DC0C;
		isa = PBXTextBookmark;
		name = "errors.c: 25";
		rLen = 0;
		rLoc = 479;
		rType = 0;
		vrLen = 544;
		vrLoc = 16;
	};
	D3B4C2C9069364C9002E6624 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {705, 2393}}";
			sepNavSelRange = "{261, 0}";
			sepNavVisRect = "{{0, 170}, {705, 449}}";
			sepNavWindowFrame = "{{199, 297}, {750, 558}}";
		};
	};
	D3B4C2DD06936514002E6624 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {817, 1133}}";
			sepNavSelRange = "{1633, 18}";
			sepNavVisRect = "{{0, 403}, {817, 730}}";
			sepNavWindowFrame = "{{199, 297}, {750, 558}}";
		};
	};
	D3B4C2E706936531002E6624 = {
		fRef = D3B4C2C9069364C9002E6624;
		isa = PBXTextBookmark;
		name = "octrope.h: 29";
		rLen = 0;
		rLoc = 687;
		rType = 0;
		vrLen = 1724;
		vrLoc = 0;
	};
	D3B4C2E806936531002E6624 = {
		fRef = D3B4C2C9069364C9002E6624;
		isa = PBXTextBookmark;
		name = "octrope.h: 29";
		rLen = 0;
		rLoc = 687;
		rType = 0;
		vrLen = 1724;
		vrLoc = 0;
	};
	D3B4C34606938141002E6624 = {
		fRef = 34DAD93C0667F99D0019DC0C;
		isa = PBXTextBookmark;
		name = "errors.h: 31";
		rLen = 0;
		rLoc = 596;
		rType = 0;
		vrLen = 1669;
		vrLoc = 0;
	};
	D3C614D006B0629E00BEF796 = {
		fRef = 34DAD9830667FAD70019DC0C;
		isa = PBXTextBookmark;
		name = "ridgerunner_main.c: 151";
		rLen = 0;
		rLoc = 3647;
		rType = 0;
		vrLen = 731;
		vrLoc = 2738;
	};
	D3C6197F06B3045000BEF796 = {
		fRef = 34DAD92B0667F9630019DC0C;
		isa = PBXTextBookmark;
		name = "dlen.h: 17";
		rLen = 0;
		rLoc = 335;
		rType = 0;
		vrLen = 430;
		vrLoc = 0;
	};
	D3C619C106B30C8E00BEF796 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {705, 657}}";
			sepNavSelRange = "{637, 12}";
			sepNavVisRect = "{{0, 143}, {705, 449}}";
			sepNavWindowFrame = "{{176, 318}, {750, 558}}";
		};
	};
	D3C619CC06B30C9A00BEF796 = {
		fRef = D3C619C106B30C8E00BEF796;
		isa = PBXTextBookmark;
		name = octrope_norm;
		rLen = 12;
		rLoc = 637;
		rType = 0;
		vrLen = 1127;
		vrLoc = 226;
	};
	D3C85E6E0695F8D5003BCB83 = {
		fRef = D38AB4DB068D1E5D00A3E679;
		isa = PBXTextBookmark;
		name = dgesdd_;
		rLen = 7;
		rLoc = 87756;
		rType = 0;
		vrLen = 3684;
		vrLoc = 85904;
	};
	D3C85EA906960621003BCB83 = {
		fRef = D3C85EAC06960622003BCB83;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 795;
		vrLoc = 0;
	};
	D3C85EAC06960622003BCB83 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.objc;
		name = latex.m;
		path = "/Users/piatek/MyApps/MATLAB_SV13/toolbox/symbolic/@sym/latex.m";
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3C85EF506961BEE003BCB83 = {
		fRef = 34DAD92B0667F9630019DC0C;
		isa = PBXTextBookmark;
		name = "dlen.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 375;
		vrLoc = 0;
	};
	D3C85EF806961C34003BCB83 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {817, 1035}}";
			sepNavSelRange = "{1770, 0}";
			sepNavVisRect = "{{0, 305}, {817, 730}}";
			sepNavWindowFrame = "{{84, 402}, {750, 558}}";
		};
	};
	D3C85F0706961C5A003BCB83 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {852, 5683}}";
			sepNavSelRange = "{4263, 1}";
			sepNavVisRect = "{{0, 2165}, {852, 599}}";
			sepNavWindowFrame = "{{61, 423}, {750, 558}}";
		};
	};
	D3C85F1306961C5C003BCB83 = {
		fRef = D3C85EF806961C34003BCB83;
		isa = PBXTextBookmark;
		name = "eqedge.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1550;
		vrLoc = 0;
	};
	D3C85F1906961C69003BCB83 = {
		fRef = D3C85F1D06961C6B003BCB83;
		isa = PBXTextBookmark;
		name = "\nvoid    clapack_matrix_write(double val, double *A, int LDA, int i, int j)\n\n     /* Function writes val to position (i,j) in the LDAxN lapack matrix A. */\n\n{\n  A[j*LDA + i] = val;\n}\n\ndouble  clapack_matrix_read(double *A, int LDA, int i, int j)\n\n     /* Function returns a value from position (i,j) in LDA x N lapack matrix A. */\n\n{\n  return A[j*LDA + i];\n}\n\nvoid    clapack_matrix_print(double *A, int M, int N) \n\n     /* Function prints the M x N lapack matrix A. */\n\n{\n  int i, j;\n\n  for(i=0;i<M;i++) {\n  \n    for(j=0;j<N;j++) {\n\n      printf(\"%3.2g \",clapack_matrix_read(A,M,i,j));\n\n    }\n\n    printf(\"\\n\");\n\n  }\n\n  printf(\"\\n\");\n\n}\n";
		rLen = 638;
		rLoc = 427;
		rType = 0;
		vrLen = 1076;
		vrLoc = 398;
	};
	D3C85F1D06961C6B003BCB83 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = "eqedge copy.c";
		path = "/Users/piatek/Desktop/ridgerunner/piasnnls/eqedge copy.c";
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3C8600B06962668003BCB83 = {
		fRef = D3C85F0706961C5A003BCB83;
		isa = PBXTextBookmark;
		name = "eqedge.c: 299";
		rLen = 0;
		rLoc = 371;
		rType = 0;
		vrLen = 1705;
		vrLoc = 7113;
	};
	D3D210E406A70DEB00B86634 = {
		exec = D3D97778067BEA23004CF65C;
		isa = PBXExecutableBookmark;
	};
	D3D2112406A70FA300B86634 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.h;
		name = eqedge.h;
		path = /Users/piatek/Desktop/ridgerunner/eqedge.h;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3D2126606A85B8600B86634 = {
		fRef = D3D2127006A85BB600B86634;
		isa = PBXTextBookmark;
		name = pline_new;
		rLen = 9;
		rLoc = 864;
		rType = 0;
		vrLen = 1806;
		vrLoc = 346;
	};
	D3D2127006A85BB600B86634 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = link.c;
		path = "/Users/piatek/Desktop/ridgerunner/liboctrope-1.0/link.c";
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3D2127106A85BBF00B86634 = {
		fRef = D3D2112406A70FA300B86634;
		isa = PBXTextBookmark;
		name = "eqedge.h: 47";
		rLen = 0;
		rLoc = 993;
		rType = 0;
		vrLen = 1289;
		vrLoc = 0;
	};
	D3D2127306A85BBF00B86634 = {
		fRef = D3D2112406A70FA300B86634;
		isa = PBXTextBookmark;
		name = "eqedge.h: 47";
		rLen = 0;
		rLoc = 993;
		rType = 0;
		vrLen = 1289;
		vrLoc = 0;
	};
	D3D97777067BEA23004CF65C = {
		activeArgIndex = 2147483647;
		activeArgIndices = (
		);
		argumentStrings = (
		);
		configStateDict = {
		};
		debuggerPlugin = GDBDebugging;
		dylibVariantSuffix = "";
		enableDebugStr = 1;
		environmentEntries = (
		);
		isa = PBXExecutable;
		name = eqdemo;
		shlibInfoDictList = (
		);
		sourceDirectories = (
		);
	};
	D3D97778067BEA23004CF65C = {
		activeArgIndex = 14;
		activeArgIndices = (
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			YES,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
			NO,
		);
		argumentStrings = (
			restart,
			foo.vect,
			open.vect,
			3_1.vect,
			tref.vect,
			structureverts.vect,
			chain.vect,
			trefchain.vect,
			torus44.vect,
			4.1lux.vect,
			3_1lux.vect,
			chain100lux.vect,
			bigchain.vect,
			dchain.vect,
			8.19.vect,
			3.1luxlux.vect,
			torus33.vect,
			test.vect,
			7.1.vect,
			tester,
			torus22.vect,
			7.2.6.vect,
			3_1cheap.vect,
			constrainedtref.vect,
			line.vect,
			rope.vect,
			8.19open.vect,
			tangle.vect,
			test.vect,
			4.1.vect,
			2.2.1.vect,
			restartTEST,
			lineTEST,
			bar.vect,
			minrad_test.vect,
			opentref.vect,
			open4.1.vect,
			restartOPEN,
			brings.vect,
			circle.vect,
			tootight.vect,
			8.4.3.vect,
			mrtest.vect,
		);
		configStateDict = {
		};
		debuggerPlugin = GDBDebugging;
		dylibVariantSuffix = "";
		enableDebugStr = 1;
		environmentEntries = (
		);
		isa = PBXExecutable;
		name = ridgerunner;
		shlibInfoDictList = (
		);
		sourceDirectories = (
		);
	};
	D3D97779067BEA23004CF65C = {
		activeArgIndex = 0;
		activeArgIndices = (
			YES,
		);
		argumentStrings = (
			3_1.vect,
		);
		configStateDict = {
		};
		debuggerPlugin = GDBDebugging;
		dylibVariantSuffix = "";
		enableDebugStr = 1;
		environmentEntries = (
		);
		isa = PBXExecutable;
		name = test_snnls;
		shlibInfoDictList = (
		);
		sourceDirectories = (
		);
	};
	D3D97787067BEA30004CF65C = {
		isa = PBXSourceControlManager;
		scmConfiguration = {
		};
		scmType = scm.cvs;
	};
	D3D97788067BEA30004CF65C = {
		indexTemplatePath = "";
		isa = PBXCodeSenseManager;
		usesDefaults = 1;
		wantsCodeCompletion = 1;
		wantsCodeCompletionAutoPopup = 0;
		wantsCodeCompletionAutoSuggestions = 0;
		wantsCodeCompletionCaseSensitivity = 1;
		wantsCodeCompletionOnlyMatchingItems = 1;
		wantsCodeCompletionParametersIncluded = 1;
		wantsCodeCompletionPlaceholdersInserted = 1;
		wantsCodeCompletionTabCompletes = 1;
		wantsIndex = 1;
	};
	D3D9844206BF52A700243C21 = {
		fRef = 34DAD92C0667F9630019DC0C;
		isa = PBXTextBookmark;
		name = "dlen.c: 53";
		rLen = 0;
		rLoc = 1422;
		rType = 0;
		vrLen = 1485;
		vrLoc = 866;
	};
	D3D984C406C0260900243C21 = {
		fRef = D3C85F0706961C5A003BCB83;
		isa = PBXTextBookmark;
		name = f;
		rLen = 1;
		rLoc = 4263;
		rType = 0;
		vrLen = 1168;
		vrLoc = 3666;
	};
	D3D984E106C02FC700243C21 = {
		fRef = D3D984E606C02FCC00243C21;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 2118;
		vrLoc = 11468;
	};
	D3D984E606C02FCC00243C21 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.ada;
		name = simple_lookup.adb;
		path = /Users/piatek/MyApps/MATLAB_SV13/simulink/ada/examples/simple_lookup/simple_lookup.adb;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3D984EA06C0342100243C21 = {
		fRef = 34DAD95B0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.c: 1324";
		rLen = 0;
		rLoc = 43943;
		rType = 0;
		vrLen = 1108;
		vrLoc = 41551;
	};
	D3EB212506C18E90003BF461 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = test_prog.c;
		path = /Users/piatek/Desktop/stanford_lsqr/test_prog.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	D3FECB2906BD95AD00C991DF = {
		exec = D3D97777067BEA23004CF65C;
		isa = PBXExecutableBookmark;
	};
	D3FECB3006BD95AF00C991DF = {
		fRef = 34DAD95A0667FA550019DC0C;
		isa = PBXTextBookmark;
		name = "stepper.h: 10";
		rLen = 0;
		rLoc = 173;
		rType = 0;
		vrLen = 449;
		vrLoc = 17;
	};
}
